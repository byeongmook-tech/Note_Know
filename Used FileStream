        private void LogWritter(string Command, bool FilePathDecide = false)
        {
            // 로그 기록 저장 파일명 
            string lcdate = DateTime.Now.ToString("yyyy-MM-dd-HH");
            // 로그 기록 저장 폴더명
            string DirectoryPAth = @"D:/Stocker/PC_Test_CommandLog";
            // 폴더 이름과 파일명 결합하여 절대경로 생성 및 생성 파일의 형식 지정
            string FilePath = Path.Combine(DirectoryPAth, $"{lcdate}.csv");
            // 만약 폴더가 없을 경우 에러가 발생하므로 기존에 있던 폴더일지라도 한 번 체크하고 만약 없으면 생성한 뒤 다음 단계 진행
            if (!Directory.Exists(DirectoryPAth)) Directory.CreateDirectory(DirectoryPAth);
            // using 구문으로 리소스 자동 해제될 수 있게 처리, 이후 로그를 기록할 파일의 절대경로와 FileMode, FileAccess 설정, 처음엔 FileMode OpenCreate로 설정했는데 파일에 쓸때 기존 내용을 지워서 Append로 변경해서 적용했는데 잘됨
            // Append로도 만약 폴더에 해당 파일이 없으면 자동 생성되고, 이때 Append의 경우 Write 권한만 줘야함
            using (FileStream fs = new FileStream(FilePath, FileMode.OpenOrCreate, FileAccess.Write))
            {
                // string을 byte[]로 변경하고 이떄 줄바꿈을 위해 +"\r\n" 추가함
                // UTF-7, UTF-8등 Encoding의 형식도 지정할 수 있음, 현재는 ASCII가 데이터 변형 과정에서 오탈자가 안생겨서 사용함
                var bytArr = Encoding.ASCII.GetBytes(Command + "\r\n");
                // byte[]을 Write할 때 배열, 쓰기 시작하는 위치(offset), count 설정이 필요함. 이때 count는 배열의 길이로 설정해야됨 배열의 길이보다 크거나 작으면 에러 발생
                fs.Write(bytArr, 0 , bytArr.Length);
                // fs의 내용을 파일에 씀, 만약 SW상에서 Filestream 객체가 데이터를 갖고있다가 쓰는 방식이 가능하다면 한 번에 쓸 수 있는지 확인해볼 것
                fs.Flush();
            }
        }
